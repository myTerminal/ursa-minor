#!/usr/bin/env bash

# Function to detect parent block device
ursa_detect () {
    # Determine current command location
    if [ $(command -v realpath) ]; then
        root_directory=$(readlink -f "${BASH_SOURCE[0]}" | xargs realpath | xargs dirname)
    else
        root_directory=$(cd "$(dirname $BASH_SOURCE[0])" ; pwd -P)
    fi

    # Determine block devices to operate on
    u_volume=$(df $root_directory | grep /dev/ | cut -d ' ' -f1)
    u_root=${u_volume%?}

    # Return the root
    echo ${u_root}
}

# Function to detach block device
ursa_detach () {
    echo "Powering-off ${1}..."
    udisksctl power-off -b ${1}
}

# Function to cleanup mount directory
ursa_cleanup () {
    echo "Unmounting vault"
    if mountpoint -q /mnt/vault; then
        echo "Vault still mounted! Please unmount first."
    else
        sudo rm -rf /mnt/vault
    fi
}

# Function to mount the vault
ursa_mount () {
    # Unlock vault
    echo "Opening vault on ${1}3..."
    sudo cryptsetup open ${1}3 vault

    # Mount vaults to directories
    echo "Creating mount directory..."
    sudo mkdir /mnt/vault
    echo "Mounting vault..."
    sudo mount /dev/mapper/vault /mnt/vault
}

# Function to unmount the vault
ursa_unmount () {
    # Unmount vaults
    echo "Unmounting vault directory..."
    sudo umount /mnt/vault

    # Close vault
    echo "Closing vault..."
    sudo cryptsetup close vault

    # Unmount home volume
    echo "Unmounting live partition..."
    udisksctl unmount -b ${1}2
}

# Function to access the vault
ursa_access () {
    # Determine the root
    u_root=$(ursa_detect)

    # Mount vault
    ursa_mount ${u_root}

    # Set the vault directory
    export URSA_VAULT_DIR=/mnt/vault

    # Start graphical session
    startxfce4
}

# Function to prepare vault for backup
ursa_backup () {
    # Determine the root
    if [ -z "$1" ]; then
        echo "Please specify a block device!"
        exit 1
    else
        u_root=$1
    fi

    # Mount vault
    ursa_mount ${u_root}

    echo "Opening the vault directory..."
    xdg-open /mnt/vault
}

# Function to remove the storage drive
ursa_remove () {
    # Determine the root
    if [ -z "$1" ]; then
        u_root=$(ursa_detect)
    else
        u_root=$1
    fi

    # Unmount, detach, clean up
    echo "Removing ${u_root}..."
    ursa_unmount ${u_root}
    ursa_cleanup
    ursa_detach ${u_root}
}

# Main entry point to the program
main () {
    local cmd="${1:-}"
    shift

    case "${cmd}" in
        a | access)
            ursa_access $@
            ;;

        b | backup)
            ursa_backup $@
            ;;

        r | remove)
            ursa_remove $@
            ;;

        *)
            echo "Please use either of the following:"
            echo "1. ursa access"
            echo "2. ursa backup"
            echo "2. ursa remove"
            ;;
    esac
}

# Start
main $@
